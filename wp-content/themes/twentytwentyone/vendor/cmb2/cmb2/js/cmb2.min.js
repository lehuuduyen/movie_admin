(window.CMB2 = window.CMB2 || {}),
  (function (c, e, $, a, f) {
    "use strict";
    var g,
      b = c.cmb2_l10,
      h = c.setTimeout,
      d = function (a) {
        return $(e.getElementById(a));
      };
    a.$id = d;
    var i = {
      idNumber: !1,
      repeatEls:
        'input:not([type="button"],[id^=filelist]),select,textarea,.cmb2-media-status,.cmb-type-custom-attached-posts',
      noEmpty:
        'input:not([type="button"]):not([type="radio"]):not([type="checkbox"]),textarea',
      repeatUpdate: 'input:not([type="button"]),select,textarea,label',
      styleBreakPoint: 450,
      mediaHandlers: {},
      defaults: {
        time_picker: b.defaults.time_picker,
        date_picker: b.defaults.date_picker,
        color_picker: b.defaults.color_picker || {},
        code_editor: b.defaults.code_editor,
      },
      media: { frames: {} },
    };
    (a.init = function () {
      (g = $(e)), $.extend(a, i), a.trigger("cmb_pre_init");
      var f = a.metabox(),
        j = f.find(".cmb-repeatable-group");
      a.initPickers(
        f.find('input[type="text"].cmb2-timepicker'),
        f.find('input[type="text"].cmb2-datepicker'),
        f.find('input[type="text"].cmb2-colorpicker')
      ),
        a.initCodeEditors(
          f.find(".cmb2-textarea-code:not(.disable-codemirror)")
        ),
        $(
          '<p><span class="button-secondary cmb-multicheck-toggle">' +
            b.strings.check_toggle +
            "</span></p>"
        ).insertBefore(".cmb2-checkbox-list:not(.no-select-all)"),
        a.makeListSortable(),
        a.makeRepeatableSortable(),
        f
          .on("change", ".cmb2_upload_file", function () {
            (a.media.field = $(this).attr("id")),
              d(a.media.field + "_id").val("");
          })
          .on("click", ".cmb-multicheck-toggle", a.toggleCheckBoxes)
          .on("click", ".cmb2-upload-button", a.handleMedia)
          .on(
            "click",
            ".cmb-attach-list li, .cmb2-media-status .img-status img, .cmb2-media-status .file-status > span",
            a.handleFileClick
          )
          .on("click", ".cmb2-remove-file-button", a.handleRemoveMedia)
          .on("click", ".cmb-add-group-row", a.addGroupRow)
          .on("click", ".cmb-add-row-button", a.addAjaxRow)
          .on("click", ".cmb-remove-group-row", a.removeGroupRow)
          .on("click", ".cmb-remove-row-button", a.removeAjaxRow)
          .on("keyup paste focusout", ".cmb2-oembed", a.maybeOembed)
          .on(
            "cmb2_remove_row",
            ".cmb-repeatable-group",
            a.resetTitlesAndIterator
          )
          .on(
            "click",
            ".cmbhandle, .cmbhandle + .cmbhandle-title",
            a.toggleHandle
          ),
        j.length &&
          j
            .on("cmb2_add_row", a.emptyValue)
            .on("cmb2_add_row", a.setDefaults)
            .filter(".sortable")
            .each(function () {
              $(this)
                .find(".cmb-remove-group-row-button")
                .before(
                  '<a class="button-secondary cmb-shift-rows move-up alignleft" href="#"><span class="' +
                    b.up_arrow_class +
                    '"></span></a> <a class="button-secondary cmb-shift-rows move-down alignleft" href="#"><span class="' +
                    b.down_arrow_class +
                    '"></span></a>'
                );
            })
            .on("click", ".cmb-shift-rows", a.shiftRows),
        h(a.resizeoEmbeds, 500),
        $(c).on("resize", a.resizeoEmbeds),
        d("addtag").length && a.listenTagAdd(),
        $(e).on("cmb_init", a.mceEnsureSave),
        a.trigger("cmb_init");
    }),
      (a.mceEnsureSave = function () {
        wp.data &&
          wp.data.hasOwnProperty("subscribe") &&
          a.canTinyMCE() &&
          wp.data.subscribe(function () {
            var b = wp.data.hasOwnProperty("select")
              ? wp.data.select("core/editor")
              : null;
            if (
              b &&
              b.isSavingPost &&
              b.isSavingPost() &&
              c.tinyMCE.editors.length
            )
              for (var a = 0; a < c.tinyMCE.editors.length; a++)
                c.tinyMCE.activeEditor !== c.tinyMCE.editors[a] &&
                  c.tinyMCE.editors[a].save();
          });
      }),
      (a.canTinyMCE = function () {
        return b.user_can_richedit && c.tinyMCE;
      }),
      (a.listenTagAdd = function () {
        g.ajaxSuccess(function (c, e, b) {
          b.data &&
            b.data.length &&
            -1 !== b.data.indexOf("action=add-tag") &&
            a.resetBoxes(d("addtag").find(".cmb2-wrap > .cmb2-metabox"));
        });
      }),
      (a.resetBoxes = function (b) {
        $.each(b, function () {
          a.resetBox($(this));
        });
      }),
      (a.resetBox = function (a) {
        a.find(".wp-picker-clear").trigger("click"),
          a.find(".cmb2-remove-file-button").trigger("click"),
          a
            .find(
              ".cmb-row.cmb-repeatable-grouping:not(:first-of-type) .cmb-remove-group-row"
            )
            .click(),
          a.find(".cmb-repeat-row:not(:first-child)").remove(),
          a
            .find('input:not([type="button"]),select,textarea')
            .each(function () {
              var a = $(this),
                b = a.prop("tagName");
              if ("INPUT" === b) {
                var c = a.attr("type");
                "checkbox" === c || "radio" === c
                  ? a.prop("checked", !1)
                  : a.val("");
              }
              "SELECT" === b && $("option:selected", this).prop("selected", !1),
                "TEXTAREA" === b && a.html("");
            });
      }),
      (a.resetTitlesAndIterator = function (a) {
        a.group &&
          $(".cmb-repeatable-group.repeatable").each(function () {
            var a = $(this),
              b = a.find(".cmb-add-group-row").data("grouptitle");
            a.find(".cmb-repeatable-grouping").each(function (a) {
              var c = $(this),
                d = c.find("h3.cmb-group-title");
              c.data("iterator", a),
                d.length && d.text(b.replace("{#}", a + 1));
            });
          });
      }),
      (a.toggleHandle = function (b) {
        b.preventDefault(),
          a.trigger(
            "postbox-toggled",
            $(this).parent(".postbox").toggleClass("closed")
          );
      }),
      (a.toggleCheckBoxes = function (c) {
        c.preventDefault();
        var a = $(this),
          b = a.closest(".cmb-td").find("input[type=checkbox]:not([disabled])");
        a.data("checked")
          ? (b.prop("checked", !1), a.data("checked", !1))
          : (b.prop("checked", !0), a.data("checked", !0));
      }),
      (a.handleMedia = function (c) {
        c.preventDefault();
        var b = $(this);
        (a.attach_id =
          !b.hasClass("cmb2-upload-list") &&
          b.closest(".cmb-td").find(".cmb2-upload-file-id").val()),
          (a.attach_id = "0" !== a.attach_id && a.attach_id),
          a._handleMedia(
            b.prev("input.cmb2-upload-file").attr("id"),
            b.hasClass("cmb2-upload-list")
          );
      }),
      (a.handleFileClick = function (c) {
        if (!$(c.target).is("a")) {
          c.preventDefault();
          var d = $(this),
            b = d.closest(".cmb-td"),
            e = b.find(".cmb2-upload-button").hasClass("cmb2-upload-list");
          (a.attach_id = e
            ? d.find('input[type="hidden"]').data("id")
            : b.find(".cmb2-upload-file-id").val()),
            a.attach_id &&
              a._handleMedia(
                b.find("input.cmb2-upload-file").attr("id"),
                e,
                a.attach_id
              );
        }
      }),
      (a._handleMedia = function (f, g) {
        if (wp) {
          var c, e;
          if (
            ((e = a.mediaHandlers),
            (c = a.media),
            (c.field = f),
            (c.$field = d(c.field)),
            (c.fieldData = c.$field.data()),
            (c.previewSize = c.fieldData.previewsize),
            (c.sizeName = c.fieldData.sizename),
            (c.fieldName = c.$field.attr("name")),
            (c.isList = g),
            f in c.frames)
          )
            return c.frames[f].open();
          (c.frames[f] = wp.media({
            title: a
              .metabox()
              .find('label[for="' + f + '"]')
              .text(),
            library: c.fieldData.queryargs || {},
            button: { text: b.strings[g ? "upload_files" : "upload_file"] },
            multiple: !!g && "add",
          })),
            c.frames[f].states.first().set("filterable", "all"),
            a.trigger("cmb_media_modal_init", c),
            (e.list = function (b, d) {
              var f,
                a = [];
              if (
                (e.list.templates ||
                  (e.list.templates = {
                    image: wp.template("cmb2-list-image"),
                    file: wp.template("cmb2-list-file"),
                  }),
                b.each(function (b) {
                  (f = e.getAttachmentHtml(b, "list")), a.push(f);
                }),
                d)
              )
                return a;
              c.$field.siblings(".cmb2-media-status").append(a);
            }),
            (e.single = function (b) {
              e.single.templates ||
                (e.single.templates = {
                  image: wp.template("cmb2-single-image"),
                  file: wp.template("cmb2-single-file"),
                });
              var a = b.first();
              c.$field.val(a.get("url")), d(c.field + "_id").val(a.get("id"));
              var f = e.getAttachmentHtml(a, "single");
              c.$field.siblings(".cmb2-media-status").slideDown().html(f);
            }),
            (e.getAttachmentHtml = function (a, c) {
              var b = "image" === a.get("type"),
                d = e.prepareData(a, b);
              return e[c].templates[b ? "image" : "file"](d);
            }),
            (e.prepareData = function (a, d) {
              return (
                d && e.getImageData.call(a, 50),
                ((a = a.toJSON()).mediaField = c.field),
                (a.mediaFieldName = c.fieldName),
                (a.stringRemoveImage = b.strings.remove_image),
                (a.stringFile = b.strings.file),
                (a.stringDownload = b.strings.download),
                (a.stringRemoveFile = b.strings.remove_file),
                a
              );
            }),
            (e.getImageData = function (h) {
              var e = c.previewSize[0] || h,
                f = c.previewSize[1] || h,
                g = this.get("url"),
                a = this.get("width"),
                b = this.get("height"),
                d = this.get("sizes");
              return (
                d &&
                  (d[c.sizeName]
                    ? ((g = d[c.sizeName].url),
                      (a = d[c.sizeName].width),
                      (b = d[c.sizeName].height))
                    : d.large &&
                      ((g = d.large.url),
                      (a = d.large.width),
                      (b = d.large.height))),
                a > e && ((b = Math.floor((e * b) / a)), (a = e)),
                b > f && ((a = Math.floor((f * a) / b)), (b = f)),
                a || (a = e),
                b ||
                  (b =
                    "svg" === this.get("filename").split(".").pop()
                      ? "100%"
                      : f),
                this.set("sizeUrl", g),
                this.set("sizeWidth", a),
                this.set("sizeHeight", b),
                this
              );
            }),
            (e.selectFile = function () {
              var b = c.frames[f].state().get("selection"),
                d = g ? "list" : "single";
              a.attach_id && g
                ? $('[data-id="' + a.attach_id + '"]')
                    .parents("li")
                    .replaceWith(e.list(b, !0))
                : e[d](b),
                a.trigger("cmb_media_modal_select", b, c);
            }),
            (e.openModal = function () {
              var b,
                d = c.frames[f].state().get("selection");
              a.attach_id
                ? ((b = wp.media.attachment(a.attach_id)).fetch(),
                  d.set(b ? [b] : []))
                : d.reset(),
                a.trigger("cmb_media_modal_open", d, c);
            }),
            c.frames[f].on("select", e.selectFile).on("open", e.openModal),
            c.frames[f].open();
        }
      }),
      (a.handleRemoveMedia = function (c) {
        c.preventDefault();
        var b = $(this);
        return b.is(".cmb-attach-list .cmb2-remove-file-button")
          ? (b.parents(".cmb2-media-item").remove(), !1)
          : ((a.media.field = b.attr("rel")),
            a.metabox().find(e.getElementById(a.media.field)).val(""),
            a
              .metabox()
              .find(e.getElementById(a.media.field + "_id"))
              .val(""),
            b.parents(".cmb2-media-status").html(""),
            !1);
      }),
      (a.cleanRow = function (b, f, e) {
        var c = b.find(a.repeatUpdate);
        if (e) {
          var d = b.find("[id]").not(a.repeatUpdate);
          b
            .find(".cmb-repeat-table .cmb-repeat-row:not(:first-child)")
            .remove(),
            d.length &&
              d.each(function () {
                var d = $(this),
                  e = d.attr("id"),
                  c = e.replace("_" + f, "_" + a.idNumber),
                  g = b.find('[data-selector="' + e + '"]');
                d.attr("id", c),
                  g.length && g.attr("data-selector", c).data("selector", c);
              });
        }
        return (
          c.filter(":checked").removeAttr("checked"),
          c.find(":checked").removeAttr("checked"),
          c.filter(":selected").removeAttr("selected"),
          c.find(":selected").removeAttr("selected", !1),
          b.find("h3.cmb-group-title").length &&
            b
              .find("h3.cmb-group-title")
              .text(b.data("title").replace("{#}", a.idNumber + 1)),
          c.each(function () {
            a.elReplacements($(this), f, e);
          }),
          a
        );
      }),
      (a.elReplacements = function (b, d, j) {
        var h,
          e,
          k = b.attr("for"),
          l = b.val(),
          m = b.prop("type"),
          c = a.getFieldArg(b, "default"),
          n = void 0 !== c && !1 !== c ? c : "",
          o = b.prop("tagName"),
          p = ("radio" === m || "checkbox" === m) && l,
          f = {};
        if (k) f = { for: k.replace("_" + d, "_" + a.idNumber) };
        else {
          var i,
            g = b.attr("name");
          (e = b.attr("id")),
            j
              ? ((i = g
                  ? g.replace("[" + d + "][", "[" + a.idNumber + "][")
                  : ""),
                (h = e ? e.replace("_" + d + "_", "_" + a.idNumber + "_") : ""))
              : ((i = g
                  ? a.replaceLast(g, "[" + d + "]", "[" + a.idNumber + "]")
                  : ""),
                (h = e ? a.replaceLast(e, "_" + d, "_" + a.idNumber) : "")),
            (f = { id: h, name: i });
        }
        if (("TEXTAREA" === o && b.html(n), "SELECT" === o && void 0 !== c)) {
          var q = b.find('[value="' + c + '"]');
          q.length &&
            q.attr("selected", "selected").prop("selected", "selected");
        }
        return (
          p &&
            (b.removeAttr("checked"),
            void 0 !== c &&
              l === c &&
              b.attr("checked", "checked").prop("checked", "checked")),
          !j &&
            b[0].hasAttribute("data-iterator") &&
            (f["data-iterator"] = a.idNumber),
          b
            .removeClass("hasDatepicker")
            .val(p || n)
            .attr(f),
          b
        );
      }),
      (a.newRowHousekeeping = function (b) {
        var c = b.find(".wp-picker-container"),
          d = b.find(".cmb2-media-status");
        return (
          c.length &&
            c.each(function () {
              var a = $(this).parent();
              a.html(
                a.find('input[type="text"].cmb2-colorpicker').attr("style", "")
              );
            }),
          d.length && d.empty(),
          a
        );
      }),
      (a.afterRowInsert = function (b) {
        a.initPickers(
          b.find('input[type="text"].cmb2-timepicker'),
          b.find('input[type="text"].cmb2-datepicker'),
          b.find('input[type="text"].cmb2-colorpicker')
        );
      }),
      (a.updateNameAttr = function () {
        var a = $(this),
          b = a.attr("name");
        if (void 0 !== b) {
          var c = parseInt(
              a.parents(".cmb-repeatable-grouping").data("iterator"),
              10
            ),
            d = c - 1,
            e = b.replace("[" + c + "]", "[" + d + "]");
          a.attr("name", e);
        }
      }),
      (a.emptyValue = function (c, b) {
        $(a.noEmpty, b).val("");
      }),
      (a.setDefaults = function (c, b) {
        $(a.noEmpty, b).each(function () {
          var c = $(this),
            b = a.getFieldArg(c, "default");
          void 0 !== b && !1 !== b && c.val(b);
        });
      }),
      (a.addGroupRow = function (k) {
        k.preventDefault();
        var b,
          e = $(this);
        a.triggerElement(e, "cmb2_add_group_row_start", e);
        var g = d(e.data("selector")),
          f = g.find(".cmb-repeatable-grouping").last(),
          i = parseInt(f.data("iterator"), 10);
        a.idNumber = parseInt(i, 10) + 1;
        for (
          var c = f.clone(), j = c.prop("nodeName") || "div";
          g.find('.cmb-repeatable-grouping[data-iterator="' + a.idNumber + '"]')
            .length > 0;

        )
          a.idNumber++;
        a
          .newRowHousekeeping(c.data("title", e.data("grouptitle")))
          .cleanRow(c, i, !0),
          c.find(".cmb-add-row-button").prop("disabled", !1);
        var h = $(
          "<" +
            j +
            ' id="' +
            ((b = (b = f.attr("id")).split("-")).splice(b.length - 1, 1),
            b.push(a.idNumber),
            b.join("-")) +
            '" class="postbox cmb-row cmb-repeatable-grouping" data-iterator="' +
            a.idNumber +
            '">' +
            c.html() +
            "</" +
            j +
            ">"
        );
        f.after(h),
          a.afterRowInsert(h),
          a.triggerElement(g, { type: "cmb2_add_row", group: !0 }, h),
          $(".check-box-pagination").each(function (a, b) {
            this.checked
              ? $(this)
                  .parent()
                  .parent()
                  .parent()
                  .find(".pagination_title")
                  .parent()
                  .parent()
                  .removeClass("hidden")
              : $(this)
                  .parent()
                  .parent()
                  .parent()
                  .find(".pagination_title")
                  .parent()
                  .parent()
                  .addClass("hidden");
          });
      }),
      (a.addAjaxRow = function (g) {
        g.preventDefault();
        var h = $(this),
          e = d(h.data("selector")),
          b = e.find(".empty-row"),
          f = parseInt(b.find("[data-iterator]").data("iterator"), 10);
        a.idNumber = parseInt(f, 10) + 1;
        var c = b.clone();
        a.newRowHousekeeping(c).cleanRow(c, f),
          b.removeClass("empty-row hidden").addClass("cmb-repeat-row"),
          b.after(c),
          a.afterRowInsert(c),
          a.triggerElement(e, { type: "cmb2_add_row", group: !1 }, c, b);
      }),
      (a.removeGroupRow = function (h) {
        h.preventDefault();
        var b = $(this),
          g = b.data("confirm");
        if (!g || c.confirm(g)) {
          var e = d(b.data("selector")),
            f = b.parents(".cmb-repeatable-grouping");
          if (e.find(".cmb-repeatable-grouping").length < 2)
            return a.resetRow(
              f.parents(".cmb-repeatable-group").find(".cmb-add-group-row"),
              b
            );
          a.triggerElement(e, "cmb2_remove_group_row_start", b),
            f
              .nextAll(".cmb-repeatable-grouping")
              .find(a.repeatEls)
              .each(a.updateNameAttr),
            f.remove(),
            a.triggerElement(e, { type: "cmb2_remove_row", group: !0 });
        }
      }),
      (a.removeAjaxRow = function (e) {
        e.preventDefault();
        var b = $(this);
        if (!b.hasClass("button-disabled")) {
          var c = b.parents(".cmb-row"),
            d = b.parents(".cmb-repeat-table");
          if (d.find(".cmb-row").length <= 2)
            return a.resetRow(c.find(".cmb-add-row-button"), b);
          c.hasClass("empty-row") &&
            c.prev().addClass("empty-row").removeClass("cmb-repeat-row"),
            b.parents(".cmb-repeat-table .cmb-row").remove(),
            a.triggerElement(d, { type: "cmb2_remove_row", group: !1 });
        }
      }),
      (a.resetRow = function (a, b) {
        a.trigger("click"), b.trigger("click");
      }),
      (a.shiftRows = function (e) {
        e.preventDefault();
        var b = $(this),
          c = b.parents(".cmb-repeatable-grouping"),
          d = b.hasClass("move-up")
            ? c.prev(".cmb-repeatable-grouping")
            : c.next(".cmb-repeatable-grouping");
        if ((a.triggerElement(b, "cmb2_shift_rows_enter", b, c, d), d.length)) {
          a.triggerElement(b, "cmb2_shift_rows_start", b, c, d);
          var f = [];
          c.find(a.repeatEls).each(function () {
            var b,
              a = $(this),
              c = a.attr("type");
            (b =
              a.hasClass("cmb2-media-status") ||
              a.hasClass("cmb-type-custom-attached-posts")
                ? a.html()
                : "checkbox" === c || "radio" === c
                ? a.is(":checked")
                : "select" === a.prop("tagName")
                ? a.is(":selected")
                : a.val()),
              f.push({ val: b, $: a });
          }),
            d.find(a.repeatEls).each(function (b) {
              var c,
                a = $(this),
                d = a.attr("type");
              if (
                a.hasClass("cmb2-media-status") ||
                a.hasClass("cmb-type-custom-attached-posts")
              ) {
                var e = a
                    .closest(".cmb-repeatable-grouping")
                    .attr("data-iterator"),
                  g = f[b].$.closest(".cmb-repeatable-grouping").attr(
                    "data-iterator"
                  );
                (c = a.html()),
                  a.html(f[b].val),
                  f[b].$.html(c),
                  f[b].$.find("input").each(function () {
                    var a = $(this).attr("name");
                    (a = a.replace("[" + e + "]", "[" + g + "]")),
                      $(this).attr("name", a);
                  }),
                  a.find("input").each(function () {
                    var a = $(this).attr("name");
                    (a = a.replace("[" + g + "]", "[" + e + "]")),
                      $(this).attr("name", a);
                  });
              } else
                "checkbox" === d
                  ? (f[b].$.prop("checked", a.is(":checked")),
                    a.prop("checked", f[b].val))
                  : "radio" === d
                  ? (a.is(":checked") && f[b].$.attr("data-checked", "true"),
                    f[b].$.is(":checked") && a.attr("data-checked", "true"))
                  : "select" === a.prop("tagName")
                  ? (f[b].$.prop("selected", a.is(":selected")),
                    a.prop("selected", f[b].val))
                  : (f[b].$.val(a.val()), a.val(f[b].val));
            }),
            c
              .find("input[data-checked=true]")
              .prop("checked", !0)
              .removeAttr("data-checked"),
            d
              .find("input[data-checked=true]")
              .prop("checked", !0)
              .removeAttr("data-checked"),
            c.find('input[type="text"].cmb2-colorpicker').trigger("change"),
            d.find('input[type="text"].cmb2-colorpicker').trigger("change"),
            a.triggerElement(b, "cmb2_shift_rows_complete", b, c, d);
        }
      }),
      (a.initPickers = function (b, c, d) {
        a.trigger("cmb_init_pickers", { time: b, date: c, color: d }),
          a.initDateTimePickers(b, "timepicker", "time_picker"),
          a.initDateTimePickers(c, "datepicker", "date_picker"),
          a.initColorPickers(d);
      }),
      (a.initDateTimePickers = function (b, c, d) {
        b.length &&
          b[c]("destroy").each(function () {
            var b = $(this),
              e = b.data(c) || {},
              f = $.extend({}, a.defaults[d], e);
            b[c](a.datePickerSetupOpts(e, f, c));
          });
      }),
      (a.datePickerSetupOpts = function (e, b, c) {
        var f = $.extend({}, b);
        return (
          (b.beforeShow = function (e, b) {
            "timepicker" === c && a.addTimePickerClasses(b.dpDiv),
              d("ui-datepicker-div").addClass("cmb2-element"),
              "function" == typeof f.beforeShow && f.beforeShow(e, b);
          }),
          "timepicker" === c &&
            (b.onChangeMonthYear = function (c, d, b, e) {
              a.addTimePickerClasses(b.dpDiv),
                "function" == typeof f.onChangeMonthYear &&
                  f.onChangeMonthYear(c, d, b, e);
            }),
          (b.onClose = function (b, a) {
            var e = d("ui-datepicker-div").removeClass("cmb2-element").hide();
            "timepicker" !== c ||
              $(a.input).val() ||
              a.input.val(e.find(".ui_tpicker_time").text()),
              "function" == typeof f.onClose && f.onClose(b, a);
          }),
          b
        );
      }),
      (a.addTimePickerClasses = function (c) {
        var b = a.addTimePickerClasses;
        (b.count = b.count || 0),
          h(function () {
            c.find(".ui-priority-secondary").length
              ? (c.find(".ui-priority-secondary").addClass("button-secondary"),
                c.find(".ui-priority-primary").addClass("button-primary"),
                (b.count = 0))
              : b.count < 5 && (b.count++, b(c));
          }, 10);
      }),
      (a.initColorPickers = function (b) {
        b.length &&
          ("object" == typeof jQuery.wp &&
          "function" == typeof jQuery.wp.wpColorPicker
            ? b.each(function () {
                var b = $(this),
                  c = b.data("colorpicker") || {};
                b.wpColorPicker($.extend({}, a.defaults.color_picker, c));
              })
            : b
                .each(function (a) {
                  $(this).after(
                    '<div id="picker-' +
                      a +
                      '" style="z-index: 1000; background: #EEE; border: 1px solid #CCC; position: absolute; display: block;"></div>'
                  ),
                    d("picker-" + a)
                      .hide()
                      .farbtastic($(this));
                })
                .focus(function () {
                  $(this).next().show();
                })
                .blur(function () {
                  $(this).next().hide();
                }));
      }),
      (a.initCodeEditors = function (b) {
        a.trigger("cmb_init_code_editors", b),
          a.defaults.code_editor &&
            wp &&
            wp.codeEditor &&
            b.length &&
            b.each(function () {
              wp.codeEditor.initialize(
                this.id,
                a.codeEditorArgs($(this).data("codeeditor"))
              );
            });
      }),
      (a.codeEditorArgs = function (d) {
        var c = ["codemirror", "csslint", "jshint", "htmlhint"],
          e = $.extend({}, a.defaults.code_editor);
        d = d || {};
        for (var b = c.length - 1; b >= 0; b--)
          d.hasOwnProperty(c[b]) &&
            (e[c[b]] = $.extend({}, e[c[b]] || {}, d[c[b]]));
        return e;
      }),
      (a.makeListSortable = function () {
        var b = a.metabox().find(".cmb2-media-status.cmb-attach-list");
        b.length && b.sortable({ cursor: "move" }).disableSelection();
      }),
      (a.makeRepeatableSortable = function () {
        var b = a.metabox().find(".cmb-repeat-table .cmb-field-list");
        b.length &&
          b.sortable({
            items: ".cmb-repeat-row",
            cursor: "move",
            cancel: "input,textarea,button,select,option,.CodeMirror",
          });
      }),
      (a.maybeOembed = function (b) {
        var c = $(this);
        ({
          focusout: function () {
            h(function () {
              a.spinner(".cmb2-metabox", !0);
            }, 2e3);
          },
          keyup: function () {
            var d = function (a, c) {
              return b.which <= c && b.which >= a;
            };
            (d(48, 90) ||
              d(96, 111) ||
              d(8, 9) ||
              187 === b.which ||
              190 === b.which) &&
              a.doAjax(c, b);
          },
          paste: function () {
            h(function () {
              a.doAjax(c);
            }, 100);
          },
        }[b.type]());
      }),
      (a.resizeoEmbeds = function () {
        a.metabox().each(function () {
          var b = $(this),
            d = b.parents(".inside"),
            f =
              b.parents(".inner-sidebar").length ||
              b.parents("#side-sortables").length,
            e = f,
            g = !1;
          if (!d.length) return !0;
          var c = d.width();
          a.styleBreakPoint > c && ((e = !0), (g = a.styleBreakPoint - 62 > c));
          var h = (c = e ? c : Math.round(0.82 * d.width() * 0.97)) - 30;
          if ((!e || f || g || (h -= 75), h > 639)) return !0;
          var i = b
            .find(".cmb-type-oembed .embed-status")
            .children()
            .not(".cmb2-remove-wrapper");
          if (!i.length) return !0;
          i.each(function () {
            var b = $(this),
              d = b.width(),
              f = b.height(),
              a = h;
            b.parents(".cmb-repeat-row").length &&
              !e &&
              ((a = h - 91), (a = 785 > c ? a - 15 : a));
            var g = Math.round((a * f) / d);
            b.width(a).height(g);
          });
        });
      }),
      (a.doAjax = function (c) {
        var e = c.val();
        if (!(e.length < 6)) {
          var i = c.attr("id"),
            d = c.closest(".cmb-td"),
            f = d.find(".embed-status"),
            j = d.find(".embed_wrap"),
            g = f.find(":first-child"),
            k = f.length && g.length ? g.width() : c.width();
          a.log("oembed_url", e, i),
            a.spinner(d),
            j.html(""),
            h(function () {
              $(".cmb2-oembed:focus").val() === e &&
                $.ajax({
                  type: "post",
                  dataType: "json",
                  url: b.ajaxurl,
                  data: {
                    action: "cmb2_oembed_handler",
                    oembed_url: e,
                    oembed_width: k > 300 ? k : 300,
                    field_id: i,
                    object_id: c.data("objectid"),
                    object_type: c.data("objecttype"),
                    cmb2_ajax_nonce: b.ajax_nonce,
                  },
                  success: function (b) {
                    a.log(b), a.spinner(d, !0), j.html(b.data);
                  },
                });
            }, 500);
        }
      }),
      (a.metabox = function () {
        return (
          a.$metabox || (a.$metabox = $(".cmb2-wrap > .cmb2-metabox")),
          a.$metabox
        );
      }),
      (a.spinner = function (a, b) {
        $(".cmb-spinner", a)[b ? "removeClass" : "addClass"]("is-active");
      }),
      (a.trigger = function (c) {
        var b = Array.prototype.slice.call(arguments, 1);
        b.push(a), g.trigger(c, b);
      }),
      (a.triggerElement = function (c, d) {
        var b = Array.prototype.slice.call(arguments, 2);
        b.push(a), c.trigger(d, b);
      }),
      (a.getFieldArg = function (b, c) {
        return a.getField(b)[c];
      }),
      (a.getFields = function (a) {
        if ("function" == typeof a) {
          var c = [];
          return (
            $.each(b.fields, function (d, b) {
              a(b, d) && c.push(b);
            }),
            c
          );
        }
        return b.fields;
      }),
      (a.getField = function (c) {
        var d = {};
        if ((c = c instanceof jQuery ? c.data("hash") : c))
          try {
            if (b.fields[c]) throw new Error(c);
            a.getFields(function (a) {
              if ("function" == typeof c) {
                if (c(a)) throw new Error(a.hash);
              } else if (a.id && a.id === c) throw new Error(a.hash);
            });
          } catch (e) {
            d = b.fields[e.message];
          }
        return d;
      }),
      (a.log = function () {
        b.script_debug &&
          console &&
          "function" == typeof console.log &&
          console.log.apply(console, arguments);
      }),
      (a.replaceLast = function (a, b, d) {
        var c = a.lastIndexOf(b);
        return a.slice(0, c) + a.slice(c).replace(b, d);
      }),
      $(a.init);
  })(window, document, jQuery, window.CMB2),
  (window.CMB2 = window.CMB2 || {}),
  (window.CMB2.wysiwyg = window.CMB2.wysiwyg || {}),
  (function (c, b, $, d, a, e) {
    "use strict";
    function f() {
      0 === h.length
        ? i.forEach(function (b) {
            i.splice(i.indexOf(b), 1), a.init.apply(a, b);
          })
        : c.setTimeout(f, 100);
    }
    function g() {
      h.forEach(function (b) {
        h.splice(h.indexOf(b), 1), a.destroy(b);
      });
    }
    var h = [],
      i = [],
      j = (a.all = {});
    (a.initAll = function () {
      var e, f, d;
      $(".cmb2-wysiwyg-placeholder").each(function () {
        (f = (e = $(this)).data()).groupid &&
          ((f.id = e.attr("id")),
          (f.name = e.attr("name")),
          (f.value = e.val()),
          a.init(e, f, !1),
          (d = !0));
      }),
        !0 === d &&
          (void 0 !== c.QTags && c.QTags._buttonsInit(),
          $(b)
            .on("cmb2_add_row", a.addRow)
            .on("cmb2_remove_group_row_start", a.destroyRowEditors)
            .on("cmb2_shift_rows_start", a.shiftStart)
            .on("cmb2_shift_rows_complete", a.shiftComplete));
    }),
      (a.addRow = function (b, c) {
        a.initRow(c, b);
      }),
      (a.destroyRowEditors = function (c, b) {
        a.destroy(
          b
            .parents(".cmb-repeatable-grouping")
            .find(".wp-editor-area")
            .attr("id")
        );
      }),
      (a.shiftStart = function (d, e, b, c) {
        b.add(c)
          .find(".wp-editor-wrap textarea")
          .each(function () {
            a.destroy($(this).attr("id"));
          });
      }),
      (a.shiftComplete = function (d, e, b, c) {
        b.add(c).each(function () {
          a.initRow($(this), d);
        });
      }),
      (a.initRow = function (b, e) {
        var g, j, k;
        b.find(".cmb2-wysiwyg-inner-wrap").each(function () {
          (j = (g = $(this)).data()),
            (k =
              void 0 !== (k = d.getFieldArg(j.hash, "default", "")) && !1 !== k
                ? k
                : ""),
            (j.iterator = b.data("iterator")),
            (j.fieldid = j.id),
            (j.id = j.groupid + "_" + j.iterator + "_" + j.fieldid),
            (j.name = j.groupid + "[" + j.iterator + "][" + j.fieldid + "]"),
            (j.value =
              "cmb2_add_row" !== e.type && g.find(".wp-editor-area").length
                ? g.find(".wp-editor-area").val()
                : k),
            0 === h.length
              ? a.init(g, j)
              : (i.push([g, j]), c.setTimeout(f, 100));
        });
      }),
      (a.init = function (i, e, k) {
        if (!e.groupid) return !1;
        var g,
          a,
          f,
          h = d.canTinyMCE(),
          l = "function" == typeof c.quicktags;
        $.extend(
          e,
          ((a = (g = e).groupid),
          (f = g.fieldid),
          (j[a] && j[a][f]) ||
            ((j[a] = j[a] || {}),
            (j[a][f] = {
              template: wp.template("cmb2-wysiwyg-" + a + "-" + f),
              defaults: {
                mce: $.extend({}, tinyMCEPreInit.mceInit["cmb2_i_" + a + f]),
                qt: $.extend({}, tinyMCEPreInit.qtInit["cmb2_i_" + a + f]),
              },
            }),
            delete tinyMCEPreInit.mceInit["cmb2_i_" + a + f],
            delete tinyMCEPreInit.qtInit["cmb2_i_" + a + f]),
          j[a][f])
        ),
          (function (a) {
            var b,
              c,
              d,
              e = new RegExp("cmb2_n_" + a.groupid + a.fieldid, "g"),
              f = new RegExp("cmb2_i_" + a.groupid + a.fieldid, "g");
            if (void 0 === tinyMCEPreInit.mceInit[a.id]) {
              for (b in (c = $.extend({}, a.defaults.mce)))
                "string" == typeof c[b] &&
                  (c[b] = c[b].replace(f, a.id).replace(e, a.name));
              tinyMCEPreInit.mceInit[a.id] = c;
            }
            if (void 0 === tinyMCEPreInit.qtInit[a.id]) {
              for (b in (d = $.extend({}, a.defaults.qt)))
                "string" == typeof d[b] &&
                  (d[b] = d[b].replace(f, a.id).replace(e, a.name));
              tinyMCEPreInit.qtInit[a.id] = d;
            }
          })(e),
          i.replaceWith(e.template(e)),
          h && c.tinyMCE.init(tinyMCEPreInit.mceInit[e.id]),
          l && c.quicktags(tinyMCEPreInit.qtInit[e.id]),
          h &&
            $(b.getElementById(e.id))
              .parents(".wp-editor-wrap")
              .removeClass("html-active")
              .addClass("tmce-active"),
          !1 !== k && void 0 !== c.QTags && c.QTags._buttonsInit();
      }),
      (a.destroy = function (a) {
        if (d.canTinyMCE()) {
          var b = tinyMCE.get(a);
          null != b
            ? (b.destroy(),
              void 0 === tinyMCEPreInit.mceInit[a] &&
                delete tinyMCEPreInit.mceInit[a],
              void 0 === tinyMCEPreInit.qtInit[a] &&
                delete tinyMCEPreInit.qtInit[a])
            : -1 === h.indexOf(a) && (h.push(a), c.setTimeout(g, 100));
        }
      }),
      $(b).on("cmb_init", a.initAll);
  })(window, document, jQuery, window.CMB2, window.CMB2.wysiwyg),
  (window.CMB2 = window.CMB2 || {}),
  (window.CMB2.charcounter = window.CMB2.charcounter || {}),
  (function (d, b, $, c, a) {
    "use strict";
    if (!wp.utils || !wp.utils.WordCounter)
      return c.log("Cannot find wp.utils!");
    a.counters = {};
    var e = a.counters,
      f = new wp.utils.WordCounter();
    (a.updateCounter = function (d) {
      if (!e.hasOwnProperty(d)) return null;
      var a = e[d],
        h =
          a.editor && !a.editor.isHidden()
            ? a.editor.getContent({ format: "raw" })
            : c.$id(d).val().trim(),
        b = f.count(h, a.type),
        i = a.max && b > a.max,
        g = a.max ? a.max - b : b;
      return (
        a.$el
          .parents(".cmb2-char-counter-wrap")
          [i ? "addClass" : "removeClass"]("cmb2-max-exceeded"),
        a.$el.val(g).outerWidth(8 * String(g).length + 15 + "px"),
        b
      );
    }),
      (a.instantiate = function (c) {
        var b = c.data();
        if (!(b.fieldId in e)) {
          var d = {
            $el: c,
            max: b.max,
            type:
              "words" === b.counterType
                ? "words"
                : "characters_including_spaces",
            editor: !1,
          };
          (e[b.fieldId] = d), a.updateCounter(b.fieldId);
        }
      }),
      (a.initAll = function () {
        $(".cmb2-char-counter").each(function () {
          a.instantiate($(this));
        });
      }),
      (a.initWysiwyg = function (c, b) {
        b.id in e &&
          ((e[b.id].editor = b), b.on("nodechange keyup", a.countWysiwyg));
      }),
      (a.addRow = function (c, b) {
        b.find(".cmb2-char-counter").each(function () {
          var b = $(this),
            c = b.attr("id").replace(/^char-counter-/, "");
          b.attr("data-field-id", c).data("field-id", c), a.instantiate(b);
        });
      }),
      (a.cleanCounters = function () {
        var a,
          c = [];
        for (a in e) b.getElementById(a) || c.push(a);
        c.length &&
          _.each(c, function (a) {
            delete e[a];
          });
      }),
      (a.countWysiwyg = _.throttle(function (b) {
        return b.hasOwnProperty("element")
          ? a.updateCounter($(b.element).data("id"))
          : b.hasOwnProperty("currentTarget")
          ? a.updateCounter($(b.currentTarget).data("id"))
          : void 0;
      })),
      (a.countTextarea = _.throttle(function (b) {
        a.updateCounter(b.currentTarget.id);
      }, 400)),
      $(b)
        .on("cmb_init", a.initAll)
        .on("tinymce-editor-init", a.initWysiwyg)
        .on("cmb2_add_row", a.addRow)
        .on("cmb2_remove_row", a.cleanCounters)
        .on("input keyup", ".cmb2-count-chars", a.countTextarea);
  })(window, document, jQuery, window.CMB2, window.CMB2.charcounter);
